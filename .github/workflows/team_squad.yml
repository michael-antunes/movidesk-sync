name: team_squad
on:
  schedule:
    - cron: '15 * * * *'
  workflow_dispatch:
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: pip install psycopg2-binary
      - env:
          NEON_DSN: ${{ secrets.NEON_DSN }}
          DB_SCHEMA: main
        run: |
          python - << 'PY'
          import os, psycopg2, re
          dsn=os.environ["NEON_DSN"]
          schema=os.getenv("DB_SCHEMA","main")
          if not re.match(r"^[A-Za-z_][A-Za-z0-9_]*$", schema): raise SystemExit("schema invalido")
          def q(x): return x.replace("{schema}", schema)
          sql = """
          SET search_path TO {schema};
          ALTER TABLE IF EXISTS {schema}.resolucao_por_ststaus RENAME TO resolucao_por_status;
          ALTER TABLE {schema}.resolucao_por_status ADD COLUMN IF NOT EXISTS team_squad text;
          CREATE INDEX IF NOT EXISTS idx_rps_agent_date ON {schema}.resolucao_por_status (agent_name, changed_date);
          CREATE INDEX IF NOT EXISTS idx_ah_name_changed ON {schema}.agentes_historico (name, changed_at);
          CREATE OR REPLACE FUNCTION {schema}.set_team_squad_before_insert()
          RETURNS trigger AS $$
          BEGIN
            SELECT ah.team_primary INTO NEW.team_squad
            FROM {schema}.agentes_historico ah
            WHERE ah.name = NEW.agent_name
              AND ah.changed_at <= NEW.changed_date
            ORDER BY ah.changed_at DESC
            LIMIT 1;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;
          DROP TRIGGER IF EXISTS trg_set_team_squad_before_insert ON {schema}.resolucao_por_status;
          CREATE TRIGGER trg_set_team_squad_before_insert
          BEFORE INSERT ON {schema}.resolucao_por_status
          FOR EACH ROW
          EXECUTE FUNCTION {schema}.set_team_squad_before_insert();
          CREATE OR REPLACE FUNCTION {schema}.update_forward_on_history_change()
          RETURNS trigger AS $$
          BEGIN
            UPDATE {schema}.resolucao_por_status r
            SET team_squad = s.team_primary
            FROM LATERAL (
              SELECT team_primary
              FROM {schema}.agentes_historico ah
              WHERE ah.name = r.agent_name
                AND ah.changed_at <= r.changed_date
              ORDER BY ah.changed_at DESC
              LIMIT 1
            ) s
            WHERE r.agent_name = NEW.name
              AND r.changed_date >= NEW.changed_at;
            RETURN NEW;
          END;
          $$ LANGUAGE plpgsql;
          DROP TRIGGER IF EXISTS trg_update_forward_on_history_insert ON {schema}.agentes_historico;
          CREATE TRIGGER trg_update_forward_on_history_insert
          AFTER INSERT ON {schema}.agentes_historico
          FOR EACH ROW
          EXECUTE FUNCTION {schema}.update_forward_on_history_change();
          DROP TRIGGER IF EXISTS trg_update_forward_on_history_update ON {schema}.agentes_historico;
          CREATE TRIGGER trg_update_forward_on_history_update
          AFTER UPDATE ON {schema}.agentes_historico
          FOR EACH ROW
          EXECUTE FUNCTION {schema}.update_forward_on_history_change();
          UPDATE {schema}.resolucao_por_status r
          SET team_squad = s.team_primary
          FROM LATERAL (
            SELECT team_primary
            FROM {schema}.agentes_historico ah
            WHERE ah.name = r.agent_name
              AND ah.changed_at <= r.changed_date
            ORDER BY ah.changed_at DESC
            LIMIT 1
          ) s
          WHERE r.team_squad IS NULL;
          """
          conn=psycopg2.connect(dsn)
          cur=conn.cursor()
          cur.execute(q(sql))
          conn.commit()
          cur.close()
          conn.close()
          PY
