import requests
import psycopg2
import os

API_TOKEN = os.getenv("API_TOKEN")
NEON_DSN  = os.getenv("NEON_DSN")

def fetch_tickets():
    # ... seu cÃ³digo para chamar a API e devolver a lista de dicionÃ¡rios ...
    return tickets

def clear_table(conn):
    """Esvazia a tabela onde vocÃª carrega os dados antes de inserir o snapshot atual."""
    with conn.cursor() as cur:
        # use TRUNCATE para apagar tudo rapidinho, sem gerar WAL linha a linha
        cur.execute("TRUNCATE TABLE visualizacao_atual.movidesk_tickets_abertos;")
    conn.commit()

def upsert_tickets(conn, tickets):
    sql = """
    INSERT INTO visualizacao_atual.movidesk_tickets_abertos
      (id, protocol, type, subject, status, basestatus, ownerTeam, serviceFirstLevel, createdDate, lastUpdate)
    VALUES
      (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
    ON CONFLICT (id) DO UPDATE
      SET protocol         = EXCLUDED.protocol,
          type             = EXCLUDED.type,
          subject          = EXCLUDED.subject,
          status           = EXCLUDED.status,
          basestatus       = EXCLUDED.basestatus,
          ownerTeam        = EXCLUDED.ownerTeam,
          serviceFirstLevel= EXCLUDED.serviceFirstLevel,
          createdDate      = EXCLUDED.createdDate,
          lastUpdate       = EXCLUDED.lastUpdate;
    """
    with conn.cursor() as cur:
        for t in tickets:
            cur.execute(sql, (
                t["id"],
                t.get("protocol"),
                t.get("type"),
                t.get("subject"),
                t.get("status"),
                t.get("baseStatus"),
                t.get("ownerTeam"),
                t.get("serviceFirstLevel"),
                t.get("createdDate"),
                t.get("lastUpdate"),
            ))
    conn.commit()

def main():
    tickets = fetch_tickets()
    print(f"ðŸ”Ž Tickets para sincronizar: {len(tickets)}")
    conn = psycopg2.connect(NEON_DSN)
    try:
        clear_table(conn)         # <â€“â€“ limpa tudo antes
        upsert_tickets(conn, tickets)
    finally:
        conn.close()

if __name__ == "__main__":
    main()
